import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderStyle, ssrRenderSuspense, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"0203. 移除链表元素【简单】","description":"","frontmatter":{},"headers":[],"relativePath":"notes/0203. 移除链表元素【简单】/README.md","filePath":"notes/0203. 移除链表元素【简单】/README.md"}');
const _sfc_main = { name: "notes/0203. 移除链表元素【简单】/README.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_Mermaid = resolveComponent("Mermaid");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="0203-移除链表元素简单" tabindex="-1"><a href="https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/0203.%20%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91" target="_self" rel="noopener">0203. 移除链表元素【简单】</a> <a class="header-anchor" href="#0203-移除链表元素简单" aria-label="Permalink to &quot;[0203. 移除链表元素【简单】](https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/0203.%20%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91)&quot;" target="_self" rel="noopener">​</a></h1><ul><li><a href="#1--description" target="_self" rel="noopener">1. 📝 Description</a></li><li><a href="#2--solutions1---%E9%81%8D%E5%8E%86" target="_self" rel="noopener">2. 🎯 Solutions.1 - 遍历</a></li><li><a href="#3--solutions2---%E9%80%92%E5%BD%92" target="_self" rel="noopener">3. 🎯 Solutions.2 - 递归</a></li></ul><h2 id="1--description" tabindex="-1">1. 📝 Description <a class="header-anchor" href="#1--description" aria-label="Permalink to &quot;1. 📝 Description&quot;" target="_self" rel="noopener">​</a></h2><details class="details custom-block"><summary><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_self" rel="noopener">leetcode</a></summary><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Tdahuyou/imgs@main/2024-11-02-21-41-17.png" alt="" loading="lazy"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：head = [1,2,6,3,4,5,6], val = 6</span></span>
<span class="line"><span>输出：[1,2,3,4,5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>示例 2：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：head = [], val = 1</span></span>
<span class="line"><span>输出：[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>示例 3：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：head = [7,7,7,7], val = 7</span></span>
<span class="line"><span>输出：[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>提示：</strong></p><ul><li>列表中的节点数目在范围 <code>[0, 10^4]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul></details><h2 id="2--solutions1---遍历" tabindex="-1">2. 🎯 Solutions.1 - 遍历 <a class="header-anchor" href="#2--solutions1---遍历" aria-label="Permalink to &quot;2. 🎯 Solutions.1 - 遍历&quot;" target="_self" rel="noopener">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> removeElements</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> function</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">head</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">val</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  let</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> root </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (cur </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> new</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> ListNode</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, head))</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  while</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (cur.next) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    if</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (cur.next.val </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">===</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> val) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">      cur.next </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> cur.next.next</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    } </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">else</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">      cur </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> cur.next</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> root.next</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><details class="details custom-block"><summary>Details</summary><ul><li>流程图：</li></ul>`);
  ssrRenderSuspense(_push, {
    default: () => {
      _push(ssrRenderComponent(_component_Mermaid, {
        id: "mermaid-77",
        class: "mermaid my-class",
        graph: "flowchart%20TD%0A%20%20%20%20Start(%5B%E5%BC%80%E5%A7%8B%5D)%20--%3E%20CreateDummy%5B%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9%20root%20%E5%92%8C%20cur%20%E6%8C%87%E5%90%91%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9%5D%0A%20%20%20%20CreateDummy%20--%3E%20Loop%7Bcur.next%20%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%3F%7D%0A%20%20%20%20Loop%20--%3E%7C%E6%98%AF%7C%20CheckValue%7Bcur.next.val%20%E6%98%AF%E5%90%A6%E7%AD%89%E4%BA%8E%20val%3F%7D%0A%20%20%20%20CheckValue%20--%3E%7C%E6%98%AF%7C%20SkipNode%5B%E8%B7%B3%E8%BF%87%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%3A%20cur.next%20%3D%20cur.next.next%5D%0A%20%20%20%20CheckValue%20--%3E%7C%E5%90%A6%7C%20MoveNext%5B%E7%A7%BB%E5%8A%A8%E5%88%B0%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%3A%20cur%20%3D%20cur.next%5D%0A%20%20%20%20SkipNode%20--%3E%20Loop%0A%20%20%20%20MoveNext%20--%3E%20Loop%0A%20%20%20%20Loop%20--%3E%7C%E5%90%A6%7C%20ReturnResult%5B%E8%BF%94%E5%9B%9E%20root.next%5D%0A%20%20%20%20ReturnResult%20--%3E%20End(%5B%E7%BB%93%E6%9D%9F%5D)%0A"
      }, null, _parent));
    },
    fallback: () => {
      _push(` Loading... `);
    },
    _: 1
  });
  _push(`<ul><li>实现思路： <ul><li>遍历链表，若链表当前节点的下一个节点的值与 val 相等，那么将下一个节点重新赋值为当前节点的 下下 个节点（即“删除链表上，当前节点的下一个节点。）否则，直接赋值为下一个节点。</li></ul></li><li>root 是哨兵节点，cur 是辅助节点。 <ul><li>最后返回的是 root.next 而非 cur.next。cur 用于实现功能，它的指向会变，但是 root 的指向始终不变，所以最终返回的是 root.next。</li><li>在链表的表头添加一个根节点 root，令 <code>root.next === head</code>，主要作用是提供一个固定的起点，以便在最后返回链表表头的时候使用。</li><li>定义一个变量 cur，初始值和 root 相同，表示当前节点，主要作用是从头遍历链表，查找需要删除的元素并将其从链表中移除。</li></ul></li><li><strong>🤔 思考：为什么要使用当前节点的下一个节点的 val 值去判断，不直接使用当前节点的 val 去判断？</strong><ul><li>单向链表中，每个节点都认为自己是头节点，它压根就不知道前边时候还有其它节点，如果使用当前节点来做判断，若判断结果是需要删除当前节点，则意味着需要将上一个节点的指针指向当前节点的下一个节点，可是此时你只能通过当前节点找到下一个节点，找不到上一个节点，导致无法删除当前节点。</li><li>试想一下，如果使用当前节点来做判断的话，若当前节点的 val 不满足要求，也就是与传入的 val 值不相等（cur.val !== val），那么，这种情况下是没问题的，直接令 cur = cur.next; 继续判断下一个节点就好。但是，如果当前节点的值满足要求的话（cur.val === val），会出现无法找到当前节点的上一个节点的问题，进而导致当前节点无法被删除。因为我们需要将上一个节点（cur.pre）的 next 指向当前节点的下一个节点 cur.next，以此来删除当前这个需要被删除的节点。</li></ul></li><li>🤔 思考：可以去掉 root 这个哨兵节点吗？最后不是返回 <code>return root.next</code> 而是直接 <code>return head;</code><ul><li>不行。</li><li>示例 3 通不过。</li><li>会报错的特殊情况：若第一个节点就是需要被删除的话，直接 <code>return head;</code> 会将原链表直接返回。</li></ul></li></ul><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：[7, 7, 7, 7] 7</span></span>
<span class="line"><span>期望输出：[]</span></span>
<span class="line"><span>实际输出：[7, 7, 7, 7]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></details><h2 id="3--solutions2---递归" tabindex="-1">3. 🎯 Solutions.2 - 递归 <a class="header-anchor" href="#3--solutions2---递归" aria-label="Permalink to &quot;3. 🎯 Solutions.2 - 递归&quot;" target="_self" rel="noopener">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> removeElements</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> function</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">head</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">val</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  if</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (head </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">===</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> null</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> head</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  head.next </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> removeElements</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(head.next, val)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> head.val </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">===</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> val </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">?</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> head.next </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">:</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> head</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><details class="details custom-block"><summary>Details</summary><ul><li>流程图：</li></ul>`);
  ssrRenderSuspense(_push, {
    default: () => {
      _push(ssrRenderComponent(_component_Mermaid, {
        id: "mermaid-167",
        class: "mermaid my-class",
        graph: "flowchart%20TD%0A%20%20%20%20Start(%5B%E5%BC%80%E5%A7%8B%5D)%20--%3E%20CheckBaseCase%7Bhead%20%E6%98%AF%E5%90%A6%E4%B8%BA%20null%3F%7D%0A%20%20%20%20CheckBaseCase%20--%3E%7C%E6%98%AF%7C%20ReturnNull%5B%E8%BF%94%E5%9B%9E%20null%5D%0A%20%20%20%20CheckBaseCase%20--%3E%7C%E5%90%A6%7C%20RecursiveCall%5B%E8%B0%83%E7%94%A8%20removeElements%20%E5%A4%84%E7%90%86%20head.next%5D%0A%20%20%20%20RecursiveCall%20--%3E%20AssignNext%5B%E5%B0%86%E7%BB%93%E6%9E%9C%E8%B5%8B%E5%80%BC%E7%BB%99%20head.next%5D%0A%20%20%20%20AssignNext%20--%3E%20CheckValue%7Bhead.val%20%E6%98%AF%E5%90%A6%E7%AD%89%E4%BA%8E%20val%3F%7D%0A%20%20%20%20CheckValue%20--%3E%7C%E6%98%AF%7C%20SkipNode%5B%E8%BF%94%E5%9B%9E%20head.next%5D%0A%20%20%20%20CheckValue%20--%3E%7C%E5%90%A6%7C%20ReturnHead%5B%E8%BF%94%E5%9B%9E%20head%5D%0A%20%20%20%20ReturnNull%20--%3E%20End(%5B%E7%BB%93%E6%9D%9F%5D)%0A%20%20%20%20SkipNode%20--%3E%20End%0A%20%20%20%20ReturnHead%20--%3E%20End%0A"
      }, null, _parent));
    },
    fallback: () => {
      _push(` Loading... `);
    },
    _: 1
  });
  _push(`<ul><li>实现思路： <ul><li>先找出口：若当前节点是 null，那么意味着 “递” 到了最后一个节点，此时可以开始 “归” 了。</li></ul></li><li>递归 <ul><li>递 <ul><li>递的过程，啥也不做，就是将当前指针 “递” 到最后一个节点</li></ul></li><li>归 <ul><li>归的过程，是在 “递” 的过程结束之后，意味着：“归” 也是从最后一个节点开始的；</li><li>归的过程，好比从后往前依次遍历各节点，对于遍历到的节点，需要判断是归并当前节点还是当前节点的下一个节点。 <ul><li>若发现当前节点的 val 值与传入的 val 值相同，那么将当前节点的下一个节点归并；（意味着删除当前这个节点）</li><li>若发现当前节点的 val 值与传入的 val 值不同，那么直接将当前节点归并；</li></ul></li></ul></li></ul></li></ul></details></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("notes/0203. 移除链表元素【简单】/README.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const README = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  README as default
};
