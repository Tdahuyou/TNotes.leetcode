import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"2131. 连接两字母单词得到的最长回文串【中等】","description":"","frontmatter":{},"headers":[],"relativePath":"notes/2131. 连接两字母单词得到的最长回文串【中等】/README.md","filePath":"notes/2131. 连接两字母单词得到的最长回文串【中等】/README.md"}');
const _sfc_main = { name: "notes/2131. 连接两字母单词得到的最长回文串【中等】/README.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="2131-连接两字母单词得到的最长回文串中等" tabindex="-1"><a href="https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/2131.%20%E8%BF%9E%E6%8E%A5%E4%B8%A4%E5%AD%97%E6%AF%8D%E5%8D%95%E8%AF%8D%E5%BE%97%E5%88%B0%E7%9A%84%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91" target="_self" rel="noopener">2131. 连接两字母单词得到的最长回文串【中等】</a> <a class="header-anchor" href="#2131-连接两字母单词得到的最长回文串中等" aria-label="Permalink to &quot;[2131. 连接两字母单词得到的最长回文串【中等】](https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/2131.%20%E8%BF%9E%E6%8E%A5%E4%B8%A4%E5%AD%97%E6%AF%8D%E5%8D%95%E8%AF%8D%E5%BE%97%E5%88%B0%E7%9A%84%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91)&quot;" target="_self" rel="noopener">​</a></h1><ul><li><a href="#1--description" target="_self" rel="noopener">1. 📝 Description</a></li><li><a href="#2--solutions" target="_self" rel="noopener">2. 🎯 Solutions</a></li></ul><h2 id="1--description" tabindex="-1">1. 📝 Description <a class="header-anchor" href="#1--description" aria-label="Permalink to &quot;1. 📝 Description&quot;" target="_self" rel="noopener">​</a></h2><details class="details custom-block"><summary><a href="https://leetcode.cn/problems/longest-palindrome-by-concatenating-two-letter-words?envType=daily-question&amp;envId=2025-05-25" target="_self" rel="noopener">leetcode</a></summary><p>给你一个字符串数组  <code>words</code> 。<code>words</code>  中每个元素都是一个包含 <strong>两个</strong>  小写英文字母的单词。</p><p>请你从 <code>words</code>  中选择一些元素并按 <strong>任意顺序</strong>  连接它们，并得到一个 <strong>尽可能长的回文串</strong> 。每个元素 <strong>至多</strong>  只能使用一次。</p><p>请你返回你能得到的最长回文串的 <strong>长度</strong> 。如果没办法得到任何一个回文串，请你返回 <code>0</code> 。</p><p><strong>回文串</strong>  指的是从前往后和从后往前读一样的字符串。</p><hr><ul><li><strong>示例 1：</strong></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：words = [&quot;lc&quot;,&quot;cl&quot;,&quot;gg&quot;]</span></span>
<span class="line"><span>输出：6</span></span>
<span class="line"><span>解释：一个最长的回文串为 &quot;lc&quot; + &quot;gg&quot; + &quot;cl&quot; = &quot;lcggcl&quot; ，长度为 6 。</span></span>
<span class="line"><span>&quot;clgglc&quot; 是另一个可以得到的最长回文串。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>示例 2：</strong></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：words = [&quot;ab&quot;,&quot;ty&quot;,&quot;yt&quot;,&quot;lc&quot;,&quot;cl&quot;,&quot;ab&quot;]</span></span>
<span class="line"><span>输出：8</span></span>
<span class="line"><span>解释：最长回文串是 &quot;ty&quot; + &quot;lc&quot; + &quot;cl&quot; + &quot;yt&quot; = &quot;tylcclyt&quot; ，长度为 8 。</span></span>
<span class="line"><span>&quot;lcyttycl&quot; 是另一个可以得到的最长回文串。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>示例 3：</strong></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：words = [&quot;cc&quot;,&quot;ll&quot;,&quot;xx&quot;]</span></span>
<span class="line"><span>输出：2</span></span>
<span class="line"><span>解释：最长回文串是 &quot;cc&quot; ，长度为 2 。</span></span>
<span class="line"><span>&quot;ll&quot; 是另一个可以得到的最长回文串。&quot;xx&quot; 也是。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 10^5</code></li><li><code>words[i].length == 2</code></li><li><code>words[i]</code>  仅包含小写英文字母。</li></ul></details><h2 id="2--solutions" tabindex="-1">2. 🎯 Solutions <a class="header-anchor" href="#2--solutions" aria-label="Permalink to &quot;2. 🎯 Solutions&quot;" target="_self" rel="noopener">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("notes/2131. 连接两字母单词得到的最长回文串【中等】/README.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const README = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  README as default
};
