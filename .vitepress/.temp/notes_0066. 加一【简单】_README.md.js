import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderStyle, ssrRenderSuspense, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"0066. 加一【简单】","description":"","frontmatter":{},"headers":[],"relativePath":"notes/0066. 加一【简单】/README.md","filePath":"notes/0066. 加一【简单】/README.md"}');
const _sfc_main = { name: "notes/0066. 加一【简单】/README.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_Mermaid = resolveComponent("Mermaid");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="0066-加一简单" tabindex="-1"><a href="https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/0066.%20%E5%8A%A0%E4%B8%80%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91" target="_self" rel="noopener">0066. 加一【简单】</a> <a class="header-anchor" href="#0066-加一简单" aria-label="Permalink to &quot;[0066. 加一【简单】](https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/0066.%20%E5%8A%A0%E4%B8%80%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91)&quot;" target="_self" rel="noopener">​</a></h1><ul><li><a href="#1--description" target="_self" rel="noopener">1. 📝 Description</a></li><li><a href="#2--solutions1---%E9%80%86%E5%BA%8F%E5%BE%AA%E7%8E%AF" target="_self" rel="noopener">2. 🎯 Solutions.1 - 逆序循环</a></li></ul><h2 id="1--description" tabindex="-1">1. 📝 Description <a class="header-anchor" href="#1--description" aria-label="Permalink to &quot;1. 📝 Description&quot;" target="_self" rel="noopener">​</a></h2><details class="details custom-block"><summary><a href="https://leetcode.cn/problems/plus-one/" target="_self" rel="noopener">leetcode</a></summary><p>给定一个由 <strong>整数</strong> 组成的 <strong>非空</strong> 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例  1：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：digits = [1,2,3]</span></span>
<span class="line"><span>输出：[1,2,4]</span></span>
<span class="line"><span>解释：输入数组表示数字 123。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>示例  2：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：digits = [4,3,2,1]</span></span>
<span class="line"><span>输出：[4,3,2,2]</span></span>
<span class="line"><span>解释：输入数组表示数字 4321。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>示例 3：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：digits = [9]</span></span>
<span class="line"><span>输出：[1,0]</span></span>
<span class="line"><span>解释：输入数组表示数字 9。</span></span>
<span class="line"><span>加 1 得到了 9 + 1 = 10。</span></span>
<span class="line"><span>因此，结果应该是 [1,0]。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= digits.length &lt;= 100</code></li><li><code>0 &lt;= digits[i] &lt;= 9</code></li></ul></details><h2 id="2--solutions1---逆序循环" tabindex="-1">2. 🎯 Solutions.1 - 逆序循环 <a class="header-anchor" href="#2--solutions1---逆序循环" aria-label="Permalink to &quot;2. 🎯 Solutions.1 - 逆序循环&quot;" target="_self" rel="noopener">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> plusOne</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> function</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">digits</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> len</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> digits.</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">length</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  for</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> i </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> len </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 1</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; i </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">&gt;=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">; i</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">--</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    digits[i]</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">++</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">    digits[i] </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">%=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 10</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">    if</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (digits[i] </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">!==</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> digits</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> result</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> Array</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(len </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">+</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 1</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">).</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">fill</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">  result[</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">] </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 1</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> result</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1) <ul><li>除非发生了全 9 的情况，这时会创建一个额外的数组，导致空间复杂度变为 O(n)。</li></ul></li><li>实现流程： <ol><li><strong>获取数组长度</strong>：首先，通过 <code>const len = digits.length</code> 获取输入数组 <code>digits</code> 的长度，这将用于循环遍历数组。</li><li><strong>从末尾开始遍历数组</strong>：使用 <code>for (let i = len - 1; i &gt;= 0; i--)</code> 从数组的最后一个元素（即个位）向前遍历到第一个元素（即最高位）。这是因为加法运算通常是从最低位（个位）开始向高位进行的，如果某一位加上 1 后产生进位，则需要将其余数存回该位置，并将进位加到下一位上。</li><li><strong>加 1 并取模</strong>： <ul><li>在循环中，先对当前位 <code>digits[i]</code> 加 1。</li><li>然后使用 <code>digits[i] %= 10</code> 对 10 取模，这是因为如果加 1 后的结果是 10（即产生了进位），那么取模后的值就是 0，相当于该位变成了 0，而进位则会在下一个循环迭代中被处理。</li><li>如果加 1 后没有产生进位（即 <code>digits[i]</code> 不等于 0），则直接返回修改后的数组 <code>digits</code>，因为这意味着整个加法操作已经完成，无需再处理更高位。</li></ul></li><li><strong>处理全部为 9 的情况</strong>：如果循环结束时仍未返回（即所有位都产生了进位，最终变成了 <code>[0, 0, ..., 0]</code>），则说明原始数组是一个由全 9 组成的数字（如 999）。此时需要创建一个新的比原数组长一位的新数组 <code>result</code>，并将第一位设为 1，其余位默认为 0，这相当于原来的数字加 1 后变成了 1000...0 这样的形式。最后返回这个新数组。</li></ol></li><li>流程图：</li></ul>`);
  ssrRenderSuspense(_push, {
    default: () => {
      _push(ssrRenderComponent(_component_Mermaid, {
        id: "mermaid-130",
        class: "mermaid my-class",
        graph: "flowchart%20TD%0A%20%20%20%20Start(%5B%E5%BC%80%E5%A7%8B%5D)%20--%3E%20GetLength%5B%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%20len%5D%0A%20%20%20%20GetLength%20--%3E%20LoopInit%5B%E4%BB%8E%20i%20%3D%20len%20-%201%20%E5%BC%80%E5%A7%8B%E9%80%86%E5%BA%8F%E5%BE%AA%E7%8E%AF%EF%BC%88%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%BB%8E%E4%B8%AA%E4%BD%8D%E5%BC%80%E5%A7%8B%E5%A4%84%E7%90%86%E5%88%B0%E6%9C%80%E9%AB%98%E4%BD%8D%EF%BC%89%5D%0A%20%20%20%20LoopInit%20--%3E%20LoopStart%7Bi%3E%3D0%7D%0A%20%20%20%20LoopStart%20--%3E%7C%E6%98%AF%EF%BC%9A%E8%BF%98%E6%B2%A1%E6%9C%89%E5%8A%A0%E5%88%B0%20digits%20%E7%9A%84%E6%9C%80%E9%AB%98%E4%BD%8D%EF%BC%8C%E7%BB%A7%E7%BB%AD%E5%81%9A%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E3%80%82%7C%20Increment%5B%22%E5%B0%86%20digits%5Bi%5D%20%E5%8A%A0%201%22%5D%0A%20%20%20%20Increment%20--%3E%20Modulus%5B%22%E5%AF%B9%20digits%5Bi%5D%20%E5%8F%96%E6%A8%A1%2010%22%5D%0A%20%20%20%20Modulus%20--%3E%20CheckZero%7B%22digits%5Bi%5D%20%E6%98%AF%E5%90%A6%E4%B8%8D%E4%B8%BA%200%3F%EF%BC%88%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%9C%A8%E9%97%AE%EF%BC%9A%E6%9C%AC%E6%AC%A1%E7%9B%B8%E5%8A%A0%E5%90%8E%E6%98%AF%E4%B8%8D%E6%98%AF%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F%E8%BF%9B%E4%BD%8D%EF%BC%9F%EF%BC%89%22%7D%0A%20%20%20%20CheckZero%20--%3E%7C%E6%98%AF%EF%BC%9A%E8%BF%99%E6%84%8F%E5%91%B3%E7%9D%80%E6%95%B4%E4%B8%AA%E5%8A%A0%E6%B3%95%E6%93%8D%E4%BD%9C%E5%B7%B2%E7%BB%8F%E5%AE%8C%E6%88%90%EF%BC%8C%E6%97%A0%E9%9C%80%E5%86%8D%E5%A4%84%E7%90%86%E6%9B%B4%E9%AB%98%E4%BD%8D%E3%80%82%7C%20ReturnDigits%5B%E8%BF%94%E5%9B%9E%20digits%5D%0A%20%20%20%20CheckZero%20--%3E%7C%E5%90%A6%EF%BC%9A%E5%BD%93%E5%89%8D%E4%BD%8D%E7%9A%84%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E4%BA%A7%E7%94%9F%E4%BA%86%E8%BF%9B%E4%BD%8D%EF%BC%8C%E9%9C%80%E8%A6%81%E7%BB%A7%E7%BB%AD%E5%88%A4%E6%96%AD%E6%9B%B4%E9%AB%98%E4%BD%8D%E5%8A%A0%201%20%E5%90%8E%E6%98%AF%E5%90%A6%E4%BC%9A%E4%BA%A7%E7%94%9F%E8%BF%9B%E4%BD%8D%E3%80%82%7C%20ContinueLoop%5B%E7%BB%A7%E7%BB%AD%E5%BE%AA%E7%8E%AF%3A%20i--%5D%0A%20%20%20%20ContinueLoop%20--%3E%20LoopStart%0A%20%20%20%20LoopStart%20--%3E%7C%E5%90%A6%EF%BC%9A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9D%9F%EF%BC%8C%E6%84%8F%E5%91%B3%E7%9D%80%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%BD%93%E4%B8%AD%E6%B2%A1%E6%9C%89%E6%BB%A1%E8%B6%B3%20if%20%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E6%B2%A1%E6%9C%89%E6%89%A7%E8%A1%8C%E5%88%B0%20return%20%E8%AF%AD%E5%8F%A5%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%20digits%20%E7%9A%84%E6%AF%8F%E4%B8%80%E4%BD%8D%E9%83%BD%E6%98%AF%209%7C%20CreateResult%5B%E5%88%9B%E5%BB%BA%E6%96%B0%E6%95%B0%E7%BB%84%20result%EF%BC%8C%E9%95%BF%E5%BA%A6%E4%B8%BA%20len%20%2B%201%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%80%BC%E5%85%A8%E4%B8%BA%200%5D%0A%20%20%20%20CreateResult%20--%3E%20SetFirst%5B%22%E8%AE%BE%E7%BD%AE%20result%5B0%5D%20%3D%201%22%5D%0A%20%20%20%20SetFirst%20--%3E%20ReturnResult%5B%E8%BF%94%E5%9B%9E%20result%5D%0A%20%20%20%20ReturnDigits%20--%3E%20End(%5B%E7%BB%93%E6%9D%9F%5D)%0A%20%20%20%20ReturnResult%20--%3E%20End%0A"
      }, null, _parent));
    },
    fallback: () => {
      _push(` Loading... `);
    },
    _: 1
  });
  _push(`</div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("notes/0066. 加一【简单】/README.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const README = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  README as default
};
