import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"2727. 判断对象是否为空【简单】","description":"","frontmatter":{},"headers":[],"relativePath":"notes/2727. 判断对象是否为空【简单】/README.md","filePath":"notes/2727. 判断对象是否为空【简单】/README.md"}');
const _sfc_main = { name: "notes/2727. 判断对象是否为空【简单】/README.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="2727-判断对象是否为空简单" tabindex="-1"><a href="https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/2727.%20%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91" target="_self" rel="noopener">2727. 判断对象是否为空【简单】</a> <a class="header-anchor" href="#2727-判断对象是否为空简单" aria-label="Permalink to &quot;[2727. 判断对象是否为空【简单】](https://github.com/Tdahuyou/TNotes.leetcode/tree/main/notes/2727.%20%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91)&quot;" target="_self" rel="noopener">​</a></h1><ul><li><a href="#1--description" target="_self" rel="noopener">1. 📝 Description</a></li><li><a href="#2--solutions1" target="_self" rel="noopener">2. 🎯 Solutions.1</a></li></ul><h2 id="1--description" tabindex="-1">1. 📝 Description <a class="header-anchor" href="#1--description" aria-label="Permalink to &quot;1. 📝 Description&quot;" target="_self" rel="noopener">​</a></h2><details class="details custom-block"><summary><a href="https://leetcode.cn/problems/is-object-empty" target="_self" rel="noopener">leetcode</a></summary><p>给定一个对象或数组，判断它是否为空。</p><ul><li>一个空对象不包含任何键值对。</li><li>一个空数组不包含任何元素。</li></ul><p>你可以假设对象或数组是通过 <code>JSON.parse</code> 解析得到的。</p><p><strong>示例 1：</strong></p><ul><li>输入：<code>obj = {&quot;x&quot;: 5, &quot;y&quot;: 42}</code></li><li>输出：<code>false</code></li><li>解释：这个对象有两个键值对，所以它不为空。</li></ul><p><strong>示例 2：</strong></p><ul><li>输入：<code>obj = {}</code></li><li>输出：<code>true</code></li><li>解释：这个对象没有任何键值对，所以它为空。</li></ul><p><strong>示例 3：</strong></p><ul><li>输入：<code>obj = [null, false, 0]</code></li><li>输出：<code>false</code></li><li>解释：这个数组有 <code>3</code> 个元素，所以它不为空。</li></ul><p><strong>提示：</strong></p><ul><li><code>obj</code> 是一个有效的 JSON 对象或数组</li><li><code>2 &lt;= JSON.stringify(obj).length &lt;= 10^5</code></li></ul><p><strong>你可以在 <code>O(1)</code> 时间复杂度内解决这个问题吗？</strong></p></details><h2 id="2--solutions1" tabindex="-1">2. 🎯 Solutions.1 <a class="header-anchor" href="#2--solutions1" aria-label="Permalink to &quot;2. 🎯 Solutions.1&quot;" target="_self" rel="noopener">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">/**</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> * </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">@param</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> {Object|Array}</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> obj</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> * </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">@return</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> {boolean}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"> */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> isEmpty</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> function</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "--shiki-light": "#E36209", "--shiki-dark": "#FFAB70" })}">obj</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">  return</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> Object.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">keys</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(obj).</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">length</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> ===</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> 0</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>Object.keys(obj)</code> 这个操作是 <code>O n</code></p><p><strong>题目描述：“你可以在 O(1) 时间复杂度内解决这个问题吗？”</strong></p><p><strong>答：不能。数组可以，对象不行。</strong></p><p><code>if (Array.isArray(obj)) return obj.length === 0</code></p><hr><p><code>JSON.stringify(obj) === &quot;{}&quot; || JSON.stringify(obj) === &quot;[]&quot;</code>、<code>JSON.stringify(obj).length === 2</code></p><p>在 <code>JSON.stringify</code> 方法中，它需要遍历整个对象或数组以将其转换为 JSON 字符串。因此，这种写法的复杂度也是 <code>O n</code>，其中 n 是对象或数组中的元素或属性的数量。</p><p>从官方测试用例的执行结果来分析，<code>Object.keys</code> 这种解法的效果要比 <code>JSON.stringify</code> 好一些。应该是 JS 引擎内部对 <code>Object.keys</code> 等相关 API 做了优化处理，复杂度也许到不了 <code>O n</code>，且比字符串处理的效果略好。</p><p>JSON.stringify</p><p><img src="https://cdn.jsdelivr.net/gh/Tdahuyou/imgs@main/2024-09-26-22-41-48.png" alt="" loading="lazy"></p><p>Object.keys</p><p><img src="https://cdn.jsdelivr.net/gh/Tdahuyou/imgs@main/2024-09-26-22-42-11.png" alt="" loading="lazy"></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("notes/2727. 判断对象是否为空【简单】/README.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const README = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  README as default
};
